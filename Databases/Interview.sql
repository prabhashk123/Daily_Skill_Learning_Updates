-- (Q) Find 2nd/3rd/nth highest salary FROM EMPLOYEE USING SQL
-- M-1 using subquery
SELECT MAX(SALARY) FROM EMPLOYEE WHERE SALATY<(SELECT MAX(SALARY) FROM EMPLOYEE 
WHERE SALARY<(SELECT MAX(SALARY) FROM EMPLOYEE));
-- M-2 USING LIMIT
SELECT SALARY FROM EMPLOYEE ORDER BY SALARY DESC LIMIT N-1,1;
-- HERE DESC IS DESCENDING ORDER AND LIMIT IS USE TO LIKE 3RD HIGNEST THAND 3-1=2 BECAUSE START INDEX 0(FIRST HIGHEST)
-- M3 USING LIMIT-OFFSET
SELECT SALARY FROM EMPLOYEE ORDER BY SALARY DESC LIMIT 1 OFFSET N-1;
-- fOR 3RD HIGHEST EXAMPLE
SELECT SALARY FROM EMPLOYEE ORDER BY SALARY DESC LIMIT 1 OFFSET 2;
-- M4 USING DISTINCT
-- (Q5) FIND ALL EMPLOYEE WHO ALSO HOLD THE MANEGERIAL POSITION
SELECT * FROM EMPLYEE WHERE (EMPLOYEE_ID IN (SELECT MANAGER_ID FROM EMPLOYEE));
--(Q6) Find name of employee that begin with "A" USE LIKE KEWORD THAND MODULAR(%) MEANS AFTER A ALL PRINTS
SELECT NAME FROM EMPLOYEE WHERE NAME LIKE 'A%';
-- SQL QUERY DISPLAY CURRENT DATE FIVE WAY
-- FORMATE YYYY-MM-DD
SELECT CURRENT_DATE;
SELECT CURRENT_DATE();
SELECT CURDATE();
-- FORMATE YYYY-MM-DD HH-MM- CONVERT USE DATE()
SELECT DATE(NOW);
SELECT DATE(CURRENT_TIMESTAMP())
-- Q(8(i)) use fetch alternate record from a table
-- FETH EVEN RECORDS:-
SELECT * FROM EMPLOYEE WHERE ID%2=0;
-- FETCH ODD RECORDS:-
SELECT * FROM EMPLOYEE WHERE ID%2=1;
-- METHOD OTHER USE ROWNUMBER
SELECT * FROM (SELECT *, ROW_NUMBER() OVER(ORDER BY ID) AS ROW_NUMBER FROM EMPLYEE) E WHERE E.ROW_NUMBER%2=0;
-- Q8(II) SQL QUERY FOR FETCH THE COMMON RECORDS FROM TWO TABLES USE "INNER JOIN"
SELECT * FROM EMPLOYEE INNER JOIN EMPLOYEE ON EMPLYEE.ID = EMP.ID;
-- Q9(I) SQL QUERY FOR FIND DUPLICATE ROWS IN TABLES? USE "GROUP BY" 1 SE JADA THANE PRINT
SELECT COLUMN, COUNT(COLUMN) FROM TABLE_NAME GROUP BY COLUMN HAVING COUNT(COLUMN)>1;
-- 9Q(II) QUERY USED TO REMOVE XTHE DUPLICATE ROWS IN TABLE? COMMON NAME DELETE
DELETE E1 FROM EMPLOYEE E1 INNER JOIN EMPLOYEE E2 WHERE EI.ID<E2.ID AND E1.NAME = E2.NAME;
-- Q(10) NTH RECORD FROM A TABLE
SELECT * FROM <TABLE_NAME>LIMIT N-1.1;
SELECT * FROM <TABLE_NAME>LIMIT 1 OFFSET N-1;
-- Q(11(I))SQL FIND FIRST FIVE RECORDS
SELECT * FROM EMPLOYEE LIMIT 5;
SELECT * FROM EMPLOYEE ORDER BY ID LIMIT 5;
-- Q(11(II))SQL FIND LAST FIVE RECORDS
(SELECT * FROM EMPLOYEE ORDER BY ID DESC LIMIT 5) ORDER BY ID ASC;
SELECT * FROM EMPLOYEE WHERE ID > (SELECT MAX(ID)-5 FROM EMPLOYEE);
SELECT * FROM EMPLOYEE WHERE ID>(SELECT COUNT(*) FROM EMPLOYEE)-5;
-- Q(12) FIND FIRST OR LAST RECORD FROM A TABLE;
-- FOR FIRST
SELECT * FROM EMPLOYEE LIMIT 1;
SELECT * FROM EMPLOYEE WHERE ID=(SELECT MIN(ID) FROM EMPLOYEE);
-- FOR LAST
SELECT * FROM EMPLOYEE ORDER BY ID DESC LIMIT 1;
SELECT * FROM EMPLOYEE WHERE ID=(SELECT MAX(ID) FROM EMPLOYEE);

-- Stored Procedure.
-- Functions.
-- Triggers.
-- Joins.


















