Agenda-
-------------
Need Of OOPs
Class
Object
Abstraction 
Encapsulation
Aggregation and association

class-
------------------
->it's a blueprint/skeleton of an object

class :
attribute->variable
behaviour->method()
Class is a description of attributes and behavior that objects of that classification should possess.
Common attributes are created using a special method called __init__
Attributes are created using the syntax, reference_variable.attribute_name = value
Behavior is created by defining a function inside the class having a special parameter called self.

class Pizza:
    toppings
	sauce
	bread
	
	prepare()


example->PIZZA
----------------------
toppings="Cheese","Sweetcorn"
sauce="Schezwan","tomato"
bread="brown bread"

prepare()



object
---------------------
->it's an instance of a class

syntax-
----------
obj_name=class_name()



Attributes
---------------
->it's a variable
->it can be created inside a class or outside a class
outside-
-------------
 obj_name.attribute=value
 
->it can be accessed outside the class 

Method
------------
syntax:
   def method_name(self):
       pass
	   
	  

calling a method:
------------------------
obj.method_name()	
OR
class_name.method_name(obj)  


ex-
------
p2=Product("Vivo",2000)

p2.purchase()
OR
Product.purchase(p2)

----------------------------------------

ex
---------
class Product:
    def __init__(self,brand,price):
        self.brand=brand
        self.price=price

    def purchase(self):
        print("purchasing:",self.brand)
    pass

p1=Product("OPPO",22000)
p1.brand="Apple"
p1.camera="16MP"
p1.camer="12MP"
print(p1.brand,p1.camera)
p1.purchase()
p2=Product()
p2.brand="Vivo"
p2.price=2200
print(p2.brand,p2.price)
p2.purchase()
-----------------------------------------------


constructor()->
---------------------
-it is a special method
-used for initilization of attributes

syntax->
-------------
def __init__(self):
   pass
   
   
ex-
------
class Product:
    def __init__(self,brand,price):
        self.brand=brand
        self.price=price

    def purchase(self):
        print("purchasing:",self.brand)
    pass

p1=Product("OPPO",22000)
p1.purchase()
p2=Product("Vivo",2000)
p2.purchase()
--------------------------------------------------------


DESTRUCTOR-->
-------------------------------------------------------------------------
->Destructor is a special method which will be invoked automatically when the object gets removed from the memory.
ex-->class Product:
    def __init__(self,price,brand):
        self.price=price
        self.brand=brand
    def __del__(self):
        print('Deleting the object')
p1=Product(10000,'Apple')
p2=Product(7000,'Samsung')
del p1
Output-->Deleting the object|In the above output, deleting the object is displayed twice. The first one, when object p1 is explicitly  	                             	   Deleting the object|deleted using del keyword.The second one, when the object p2 is deallocated from the memory implicitly.
---------------------------------------------------------------------------

self
-------------   
->it is used to store the reference of current object
->it is first attribute of any method defined in a class


ABSTRACTION
-----------------------
->hiding unnecessary data
->showing only the relevant data to a user



ENCAPSULATION
-------------------
->restricting the accesss
->keeping things private
->binding data and method as one

->we can make our attributes private to  restrict the access of others

syntax-
------------
__var=var

->to make any attribute private we have to add '__' in front of it
ex- self.__wallet=wallet
->it won't be accessible directly outside the class


->to access the private variables outside the class we have getter and setter methods
->setter method will set the value of private variable
->getter method will return the value of private variable



example
------------
class Customer:
    def __init__(self,cust_id,name,wallet):
        self.cust_id=cust_id
        self.name=name
        self.__wallet=wallet
    def data(self):
        print(self.__wallet)
    def set_wallet(self,wallet):
        self.__wallet=wallet
    def get_wallet(self): 
        return self.__wallet

#outsider
c1=Customer(22,"john",2000)
c1.data()
print("Wallet:",c1.get_wallet())
----------------------------------------------------------------

NOTE->u can access private variable using 
  # obj.className__privateVar
 
ex
----
print("Wallet:",c1._Customer__wallet) 
-------------------------------------------------------------------------- 

#Function->                                                    #Method->
->It is a block of code with a name                            ->Is a part of an object and represents the behaviour of the object
->It can be invoked using the name of the				   ->Can be invoked only on an object,using dot operator Without and object 
` function and parameters.						     we can't invoked a method
->ex-len([1,2,3])								   ->ex-[1,2,3].reverse()
->parameter are optional in a Function.				   ->A method must have at least one parameter:self.

----------------------------------------------------------------------------
nextday=>

Static method
Aggregation and Association
Inheritance
Custom Exception
Special methods

Static
---------
class Product:
    discount=10   #static variable
    def __init__(self,brand,price):
        self.brand=brand
        self.price=price

    def purchase(self):
        print("purchasing:",self.brand)
        total=self.price-self.price*Product.discount/100
        print("Final Price of",self.brand,"is:",total)
    def return_prod(self):
        print("returning:",self.brand)

def enable_dis():
    Product.discount=50
def disable_dis():
    Product.discount=0

print("Normal season")
p1=Product("OPPO",22000)
p1.purchase()

print("Without any discount")
disable_dis()
p1.purchase()

print("Festive Season")
enable_dis()
p1.purchase()

----------------------------------------------------------------------

STATIC METHOD
-------------------
->it is class level method
->to define static method we have to give @staticmethod keyword
->it does not contain self keyword 
->calling
 className.method_name
 

ex
---
class Product:
    discount=10   #static variable
    def __init__(self,brand,price):
        self.brand=brand
        self.price=price

    def purchase(self):
        print("purchasing:",self.brand)
        total=self.price-self.price*Product.discount/100
        print("Final Price of",self.brand,"is:",total)
    def return_prod(self):
        print("returning:",self.brand)
    @staticmethod
    def enable_dis():
        Product.discount=50
    @staticmethod
    def disable_dis():
        Product.discount=0

print("Normal season")
p1=Product("OPPO",22000)
p1.purchase()

print("Without any discount")
Product.disable_dis()
p1.purchase()

print("Festive Season")
Product.enable_dis()
p1.purchase()

---------------------------------------------------------------------------------------------------------------


RELATIONS
-----------------
AGGREGATION AND ASSOCIATION
-----------------------------

Aggregation
-------------
->when two classes have their independent existance, i.e life cycle of both are not dependent on each other
->one class is using another class at some point of time
->it is has-a relation, represented by diamond symbol
->object of one class will be used as an attribute of another class  #in coding part
--------------------------------------------------------
ex->we have a customer class

Customer:
custId
custName
phone


->we have address class
Address:
door
street
pin
city

->here both addresss class and customer class are independent of each other
->but at some point of time customer can use any particular address
LIKE->customer has-a address


-------------------------------
class Customer:
    def __init__(self,cust_id,name,wallet,addr):
        self.cust_id=cust_id
        self.name=name
        self.wallet=wallet
        self.addr=addr
    def data(self):
        print(self.cust_id,self.name,self.wallet)
    def deliver(self):
        print("delivery address",self.addr.city,"for",self.name)

class Address:
    def __init__(self,door,street,city,pin):
        self.door=door
        self.street=street
        self.pin=pin
        self.city=city
    def detail(self):
        print(self.door,self.street,self.city,self.pin)
#outsider


a1=Address(314,"7th","Mysore",511109)
# a1.detail()
a2=Address(214,"8th","Goa",34566)
# a2.detail()

c1=Customer(22,"john",2000,a2)
c1.deliver()


-------------------------------------------------------------------------------------------------




ASSOCIATION
----------------
->it is a weaker relation
->when one class is dependent on another class
->ex- department(class) will not exists without college(class)
->account cannot exists without customer
->in association we will send obj of one class as an attribute of another class #coding part

class Customer:
    def __init__(self,custId,name):
        self.name=name
        self.custId=custId

    def pay(self,payment):
        print(payment.type,payment.price)

class Payment:
    def __init__(self,type,price):
        self.price=price
        self.type=type


p1=Payment("Upi",200)
c1=Customer(1,"JOy")
c1.pay(p1)

-------------------------------------------------------------------------
"""Uses of class attribute """
--------------------------------------------------
class Customercare:
    helpline=9570588189
class Custromer:
    def call_support(self):
        print("Calling",Customercare.helpline)
Custromer().call_support()

---------------------------------------------------------------
"""Uses of classmethod -means private of class attribute"""
---------------------------------------------------------------
class CustomerCare:
    __helplineno=9709938919
    @classmethod
    def get_helpline(cls):
        return cls.__helplineno
class Customers:
    def call_supports(self):
        print("Calling",CustomerCare.get_helpline())
Customers().call_supports()
-------------------------------------------------------------------

INHERITANCE
------------------
->when a class can inherit or use the properties of another class this is known as inheritance
->classes will be having parent child relation
->All the properties of parent class will be inherited by child class(except private properties)
->common functionalities will be defined in base/parent class
->it will increse the reusability of a code, instead of writing evertime from scratch we can inherit 
the properties of base class and we can add extra features in child class
->parent class cannot use the properties of child class

Syntax
----------
class Parent:
     pass
	 
class Child(Parent):
    pass	 




Example
--------------
FeaturePhone:
   price 
   brand
   camera
   type
   
   buy()
   exchange()


SmartPhone:
   price
   brand
   camera
   os
   ram

   buy()
   insure()   

--------------------------------
Phone:
   price 
   brand
   camera
   
   buy()
   
   
FeaturePhone(Phone):
   type
   exchange()
   
SmartPhone(Phone):
   os
   ram
   insure()   
   
   
---------------------------------------------------------

class Phone:
    def __init__(self,brand,price,camera):
        self.brand=brand
        self.price=price
        self.camera=camera
    def buy(self):
        print("Buying",self.brand)
               
class FeaturePhone(Phone):
    pass

class SmartPhone(Phone):
    pass

p1=SmartPhone("Apple",22222,"16MP")
p1.buy()	
	
       
---------------------------------------------------------------

Method Overriding
----------------------
->when same name method is defined in both parent and child class


super()
----------------
->it is a keyword used to invoke parent class method and constructor 


class Phone:
    def __init__(self,brand,price,camera):
        self.brand=brand
        self.price=price
        self.camera=camera
    def buy(self):
        print("Buying",self.brand,"phone")

class FeaturePhone(Phone):
    pass

class SmartPhone(Phone):
    def __init__(self,brand,price,camera,os,ram):
        super().__init__(brand,price,camera)
        self.os=os
        self.ram=ram
        pass
    def buy(self):
        super().buy()
        print("Buying a Smartphone",self.brand,"ram:",self.ram)
    def insure(self):
        print("Insurance of",self.brand,"phone")



p1=SmartPhone("Apple",22222,"16MP",'Oreo','4GB')
p1.buy()
p1.insure()
-------------------------------------------------


TYPES OF INHERITANCE
-------------------------

Single
---------------
Parent
  |
Child



Multilevel
------------------
GrandParent
     |
 Parent
     |
   Child


Multiple
---------------
parent1   parent2
\            /
   Child
   
   
Hierarchical   
--------------
    Parent
  /         \
child1  child2
   

Multilevel
----------------------
class Product:
    def detail(self):
        print("I m a product")


class Phone(Product):

    def __init__(self,brand,price,camera):
        self.brand=brand
        self.price=price
        self.camera=camera
    def buy(self):
        print("Buying",self.brand,"phone")

class FeaturePhone(Phone):
    pass

class SmartPhone(Phone):
    def __init__(self,brand,price,camera,os,ram):
        super().__init__(brand,price,camera)
        self.os=os
        self.ram=ram
        pass
    def buy(self):
        super().buy()
        print("Buying a Smartphone",self.brand,"ram:",self.ram)
    def insure(self):
        print("Insurance of",self.brand,"phone")



p1=SmartPhone("Apple",22222,"16MP",'Oreo','4GB')
p1.buy()
p1.insure()
p1.detail()
----------------------------------------------------------

Multiple
---------------
class Product:
    def detail(self):
        print("I m a product")

class Phone:
    def __init__(self,brand,price,camera):
        self.brand=brand
        self.price=price
        self.camera=camera
    def buy(self):
        print("Buying",self.brand,"phone")

    def detail(self):
        print("I m a Phone")

class SmartPhone(Product,Phone):
    def __init__(self,brand,price,camera,os,ram):
        super().__init__(brand,price,camera)
        self.os=os
        self.ram=ram
        pass
    def buy(self):
        super().buy()
        print("Buying a Smartphone",self.brand,"ram:",self.ram)
    def insure(self):
        print("Insurance of",self.brand,"phone")



p1=SmartPhone("Apple",22222,"16MP",'Oreo','4GB')
p1.buy()
p1.insure()
p1.detail()



---------------------------------------------------------------------------------------------------------------------

CUSTOM EXCEPTION
-----------------------------
try:
except:

->User defined exception


ex1
------------
age=int(input("enter your age"))

try:
    if age<18:
        raise Exception
    else:
        v_id=input("Do u have voter id?Y or N")
        if v_id=="N":
            raise Exception
        print("You are eligible to vote")

except:
    print("Some Error occured")

-------------------------------------------------------------------
ex2
---

age=int(input("enter your age"))

try:
    if age<18:
        raise Exception("age")
    else:
        v_id=input("Do u have voter id?Y or N")
        if v_id=="N":
            raise Exception("id")
        print("You are eligible to vote")

except Exception as e:
    if(str(e)=="age"):
        print("You r not eligible to vote as your age is less than 18")
    elif(str(e)=="id"):
        print("You cannot vote without voter Id")
    else:
        print("Some Error occured")
--------------------------------------------------------------------------------		

ex3
----------------
class InvalidAge(Exception):
    pass

class VoterId(Exception):
    pass

age=int(input("enter your age"))

try:
    if age<18:
        raise InvalidAge
    else:
        v_id=input("Do u have voter id?Y or N")
        if v_id=="N":
            raise VoterId
        print("You are eligible to vote")


except VoterId:
    print("You cannot vote without voter id")

except InvalidAge:
    print("You are not eligible to vote as your age is less than 18")

except:
    print("Some Error occured")	
--------------------------------------------
#example of class method and static method

# Python program to demonstrate
# use of class method and static method.

from datetime import date
class Person:
	def __init__(self, name, age):
		self.name = name
		self.age = age

	# a class method to create a Person object by birth year.
	@classmethod
	def fromBirthYear(cls, name, year):
		return cls(name, date.today().year - year)

	# a static method to check if a Person is adult or not.
	@staticmethod
	def isAdult(age):
		return age > 18


person1 = Person('mayank', 21)
person2 = Person.fromBirthYear('mayank', 1996)

print(person1.age)
print(person2.age)

# print the result
print(Person.isAdult(22))

-------------------------------------------------------------------
nextday
Agenda3-
-----------------
Need Of database
Mysql connection
NoSQL 
MongoDB connection


Need Of database-
------------------------
->To store data
->process data


MYSQL
-------------------
->install mysql.connector
#pip install mysql.connector


Steps:-
---------------
->import mysql.connector
->create connection object
->create cursor
->execute query
->close cursor
->commit changes
->close the connection





INSERT
------------------
import mysql.connector

con=mysql.connector.connect(host="localhost", user="root", passwd="", database="april_python")
cur=con.cursor()
cur.execute("Insert into Computer Values(2,'HP','Vosto','2001')")
cur.close()
con.commit()
con.close()

---------------------------------------------------------------------------------------

SELECT
--------------

import mysql.connector
con=mysql.connector.connect(host="localhost", user="root", passwd="", database="april_python")
cur=con.cursor()
cur.execute("SELECT * FROM Computer")

for r in cur:
    print(r)

# for r in cur:
#     print(r[1],r[3])

# for c1,c2,c3,c4 in cur:
#     print(c2,c4)

# print(cur.rowcount)
cur.close()
con.commit()
con.close()

----------------------------------------------------------------

->methods to fetch some no. of rows
-fetchone()  ->to fetch one row 
-fetchmany(n)  ->to fetch n numbers of rows #if u r not passing any value it will read one row
-fetchall()  ->to get all the rows in output


--

import mysql.connector
con=mysql.connector.connect(host="localhost", user="root", passwd="", database="april_python")
cur=con.cursor()
cur.execute("SELECT * FROM Computer where year='2001'")

# print(cur.fetchone())
# print(cur.fetchmany())
print(cur.fetchall())

# print(cur.rowcount)
# cur.close()
# con.commit()
# con.close()
#
-----------------------------------------------------------------------------------------------------------


DELETE
-----------------


import mysql.connector
con=mysql.connector.connect(host="localhost", user="root", passwd="", database="april_python")
cur=con.cursor()
cur.execute("DELETE FROM Computer where year='2000'")

print(cur.rowcount)
cur.close()
con.commit()
con.close()

---------------------------------------------------------------------------------------------

UPDATE
--------------
import mysql.connector
con=mysql.connector.connect(host="localhost", user="root", passwd="", database="april_python")
cur=con.cursor()

cur.execute("Update Computer set name='INTEL' where C_ID=7")

print(cur.rowcount)
cur.close()
con.commit()
con.close()





VARIABLE BINDING:
-----------------------
->instead of hardcoding the values we will pass the variable
->variable value will be used in a query

->u can pass single variable

ex->
cur=con.cursor()
p=input("id to be deleted")
cur.execute("DELETE FROM Computer where C_ID="+p)


->u can pass list of variables
ex1->
------
p=input("id to be deleted")
cur.execute("DELETE FROM Computer where C_ID=%s",[p])

ex2->
-----------
id=input("Enter ID")
name=input("Enter Name")
brand=input("Enter brand")
year=input("Enter year")
cur.execute("Insert into Computer(C_ID,NAME,BRAND,YEAR) values (%s,%s,%s,%s)",[id,name,brand,year])



->u can pass dictionary
ex1-
---------
id=input("id to be deleted")
cur.execute("DELETE FROM Computer where C_ID=%(id)s",{'id':'C_ID'})

ex2-
--------
c_id=input("Enter ID")
name=input("Enter Name")
brand=input("Enter brand")
year=input("Enter year")
cur.execute("Insert into Computer(C_ID,NAME,BRAND,YEAR) values (%(c_id)s,%(name)s,%(brand)s,%(year)s)",{'c_id':c_id,'name':name,'brand':brand,'year':year})



MYSQL Exceptions-
---------------------
import mysql.connector

try:
    con=mysql.connector.connect(host="localhost", user="root", passwd="", database="april_python")

    cur=con.cursor()
   
    cur.execute("Update Computer set name='INTEL' where C_ID=7")
    print(cur.rowcount)
    cur.close()
    con.commit()
    con.close()


except mysql.connector.errors.ProgrammingError as e:
    print("programming error",str(e))

except mysql.connector.errors.OperationalError as e:
    print("Operational error",str(e))

except Exception as e:
    print(str(e))

-------------------------------------------------------------------------------------------------------





Special Methods
----------------------
__str__->

class Product:
    def __init__(self,brand,price):
        self.brand=brand
        self.price=price

    def __str__(self):

        return self.brand+" "+str(self.price)


p1=Product("Vivo",2222)
p2=Product("Oppo",3333)

print(p1)

-------------------------------------

__add__

class Product:
    def __init__(self,brand,price):
        self.brand=brand
        self.price=price

    def __str__(self):
        return self.brand+" "+str(self.price)
    def __add__(self, other):
        return self.brand+other.brand


p1=Product("Vivo",2222)
p2=Product("Oppo",3333)

print(p1+p2)           #+ ->add()

-----------------------------------------------------

ClassMethod
------------
->it is used to change the class level variable value
->it will be called using class name   #className.methodName
->1 mandatory default argument is their "cls"
   

class Product:
    discount=10
    def __init__(self,price):
        self.price=price

    def cost(self):
        total=self.price-self.price*Product.discount/100
        print(total)

    @classmethod
    def enable_dis(cls):
        cls.discount=50

    @classmethod
    def disable_dis(cls):
        cls.discount=0


p1=Product(333)
p1.cost()
Product.enable_dis()
p1.cost()
-----------------------------------------------------------------------------------------



ITERATION
---------------------------
LIST
-------------
l1=[22,33,66,77]

# for i in l1:              #traversal without index
#     print(i)


for i in range(len(l1)):            #traversal using index
    print(l1[i])
	
	
STRING
--------------
l1="HELLO WORLD"

for i in l1:              #traversal without index
    print(i)

#
# for i in range(len(l1)):            #traversal using index
#     print(l1[i])
	
-----------------------------------------------------------------------------------
nextday

Agenda
---------------------------------
NoSQL
MongoDB
Web programming



NoSQL
--------------
->No Only SQL
->Unstructured or semi-structured
->No predefined schema
->Every row can have different no. of cols



MongoDB
-------------------
->Document-oriented database
->table will be called as collection
->row will be called  document
->Here data will be passed in JSON format i.e key-value pair



Connection of MongoDB and Python
-----------------------------------
->install pymongo

->import pymongo
->connect with host
->connect to db
->use collection


import p

commands
---------------
show dbs ->to see all the databases

use db_name->to use any db

show collections->to see all the collections/table in your current db

Insert
-------------
Python          Mongo
-----------------------------
insert
insert_one      #insertOne
insert_many     #insertMany
db.student.insert({name:"Shrey",age:23})



insert_one
--------------
from pymongo import MongoClient          

conn=MongoClient('mongodb://localhost:27017/')

db=conn['Apr']
coll=db['Employee']
coll.insert_one({"name":"John","age":"45"})



insert_many
------------------
from pymongo import MongoClient

conn=MongoClient('mongodb://localhost:27017/')           #connecting to a host

db=conn['Apr']                                           #connecting to db
coll=db['Employee']                                      #connecting to a collection
var=coll.insert_many([{"name":"Sam","age":"45","dept":"Production"},{"name":"Roy","city":"Mysore","dept":"ETA"}])

print(var.inserted_ids)          #to get the inserted ids



Select/Find
--------------
db.student.find();             #select * from student

->find
->find_one


find_one
-------------
from pymongo import MongoClient
conn=MongoClient('mongodb://localhost:27017/')           #connecting to a host
db=conn['Apr']                                           #connecting to db
coll=db['Employee']                                      #connecting to a collection
var=coll.find_one()
print(var)


find
-------------
from pymongo import MongoClient
conn=MongoClient('mongodb://localhost:27017/')           #connecting to a host
db=conn['Apr']                                           #connecting to db
coll=db['Employee']                                      #connecting to a collection
var=coll.find()

for row in var:
    print(row)


ex2
-----
from pymongo import MongoClient
conn=MongoClient('mongodb://localhost:27017/')           #connecting to a host
db=conn['Apr']                                           #connecting to db
coll=db['Employee']                                      #connecting to a collection
var=coll.find({'dept':'ETA'},{'name':1,'_id':0})

for row in var:
    print(row)

-------------------------------------------------------------------------------------

DELETE
------------
delete_one
delete_many


delete_one
--------------
from pymongo import MongoClient
conn=MongoClient('mongodb://localhost:27017/')           #connecting to a host
db=conn['Apr']                                           #connecting to db
coll=db['Employee']                                      #connecting to a collection
var=coll.delete_one({'dept':'ETA'})





delete_many
-----------------
from pymongo import MongoClient
conn=MongoClient('mongodb://localhost:27017/')           #connecting to a host
db=conn['Apr']                                           #connecting to db
coll=db['Employee']                                      #connecting to a collection
var=coll.delete_many({'dept':'Production'})





UPDATE
---------------------
update_one
update_many


update_one
------------
coll.update_one({'age':'45'},{'$set':{'city':'Chennai'}})

update_many
------------------
from pymongo import MongoClient
conn=MongoClient('mongodb://localhost:27017/')           #connecting to a host
db=conn['Apr']                                           #connecting to db
coll=db['Employee']                                      #connecting to a collection
coll.update_many({'age':'45'},{'$set':{'city':'Chennai'}})

#var=coll.update_one({'age':'45'},{'$set':{'city':'Chennai'}})
-----------------------------------------------------------------------------------------------


WEB PROGRAMMING
---------------------

Client/server architecture is a computing model in which the server hosts, delivers, and manages most of the resources 
and services to be consumed by the client. 
This type of architecture has one or more client computers connected to a central server over a network or internet connection. 
Any web application designed will have a three tier/layered architecture. 



ARCHITECTURE
-------------
3-TIER  ARCHITECTURE


1-PRESENTATION LAYER->This is handling the UI part of an application

2-APPLICATION LAYER->Here we r handling all the business logic and processing of data

3-PERSISTANCE LAYER->It handles database and is responsible to manage and store data





CGI- Common Gateway Interface
-------------------------------------
CGI is a specification for transferring information between a World Wide Web server and a CGI program. 
A CGI program is any program designed to accept and return data that conforms to the CGI specification.



->here we'll be using inbuilt server 

Step 1->Start a server

python -m http.server --cgi 8080


Step 2->create cgi-bin folder

Step 3->create your file in cgi-bin folder


ex-
---------


#!C:\Program Files\Python310\python.exe              #where script is getting executed
import cgi
print('content-type:text/html\n')                     #mime type i.e what type of content u r passing

print('''
<html>
<head></head>
<body>
<h1>Welcome</h1>
<body>
</html>
''')

----------------------

enable error 
-------------

#!C:\Program Files\Python310\python.exe              #where script is getting executed
import cgi
import cgitb
cgitb.enable()                                       #to trace the errors
print('content-type:text/html\n')
x=10/0
print('''
<html>
<head></head>
<body>
<h1>Welcome</h1>
<h2>Heyyyyyy</h2>
<body>
</html>
''')


----------------------------
Hide error
---------------

cgitb.enable(display=0,logdir='/temp')



ex
----
#!C:\Python34\python.exe
import cgi, cgitb
cgitb.enable(display = 0, logdir = '/temp')
print('Content-type:text/html \n')
print('''
	<html>
		<head>
			<title> My First CGI Script </title>
		</head>
		<body>
			<h1> Login Form </h1>
			<form method="POST" action="">
				Username : <input type="text" name="username" placeholder="Enter Username" required /> <br />
				Password : <input type="password" name="password" placeholder="Enter Password" required /> <br />
				<input type="submit" name="submit" value ="Login" />
			</form>
		</body>
	</html>
''')
form = cgi.FieldStorage()
if form:
    if('username' in form.keys() and 'password' in form.keys()):
        if(form['username'].value == 'admin'):
            if(form['password'].value == 'admin@123'):
                print('Login Successful !!! <br /> You will be redirected to homepage in 3 seconds ...')
                print('<meta http-equiv=refresh content="3;url=p1.py" />')
            else:
                print('Incorrect Password')
        else:
            print('Invalid Username')

-------------------------------------------------------------------------------------------------------------
nextday
Agenda
----------------
Working with excel
working with csv



Excel
---------------
(Step1)pip install openpyxl

-import openpyxl
-load_workbook to connect with workbook
-sheetnames will return the worksheets present in our current workbook
-cell fun is used to connect to a cell
-to find maximun no of row we have max_row fun
-for maximum col we max_col function


Ex
-------

import openpyxl as xl

wb=xl.load_workbook(r'Office1.xlsx')
print("Sheetnames:",wb.sheetnames)    #to get the name of all worksheets
ws=wb['Emp']
print(type(ws))
cell1=ws.cell(2,2)
print(cell1.value)
c2=ws['A2']
print(c2.value)


ex2-to read row and col data
-------------------------------
import openpyxl as xl
wb=xl.load_workbook(r'Office1.xlsx')
ws=wb['Emp']
print("maximum row:",ws.max_row)
print("maximum column:",ws.max_column)

row=ws[2]

for r in row:
    print(r.value)

col=ws['B']
for col in col:
    print(col.value)


Slicing
---------------
import openpyxl as xl
wb=xl.load_workbook(r'Office1.xlsx')
ws=wb['Emp']

row=ws['A1':'B4']
for col in row:
    for cell in col:
        print(cell.value)




Append->to add data
------------------------
->append() - is used to add data


import openpyxl as xl
wb=xl.load_workbook(r'Office1.xlsx')
ws=wb['Sheet']
ws.append(['Id',"Name"])
ws.append([5,'ROHAN'])
ws.append([6,"Pragya"])
wb.save(r'Off.xlsx')


-------------------------------

Delete->to delete data
---------------------------
->delete_rows(row_num , no of rows to be deleted)
->dealete_cols(col_num ,no of cols to be deleted)

import openpyxl as xl
wb=xl.load_workbook(r'Off.xlsx')
ws=wb['Sheet']
# ws.delete_rows(2,2)
ws.delete_cols(2)
wb.save(r'Off.xlsx')

------------------------------------

Insert Row /Column
------------------------
->insert_rows()->to insert row
->insert_cols()->to insert col
import openpyxl as xl
wb=xl.load_workbook(r'Office1.xlsx')
ws=wb['Emp']
# ws.insert_rows(2,2)
ws.insert_cols(1,4)
wb.save(r'Office1.xlsx')




Create Workbook, Worksheet and remove worksheet
---------------------------------------------------
import openpyxl as xl

wb=xl.Workbook()          #create workbook
wb.create_sheet(title="d1",index=0)  #worksheet creation
print(wb.sheetnames)
wb.remove(wb['Sheet'])               #remove worksheet

print(wb.sheetnames)
wb.save(r'Employeex.xlsx') 



---------------------------------------------------------------------

CSV->Comma Seperated Value
----------------------------
->import csv 
->open(file_path,mode)

->mode can be:
 r:read
 w:write(truncate the previous data)
 a:append(retain the previous data)
 
Reader Option
---------------
reader()->to read the data
DictReader()->to read the data in dictionary format


reader()-
--------------
import csv

with open(r'data.csv','r') as csvfile:
    content=csv.reader(csvfile)
    print(type(content))
    for c in content:
        print(c)

DictReader()-
------------------
import csv

with open(r'data.csv','r') as csvfile:
    content=csv.DictReader(csvfile)
    print(type(content))
    for c in content:
        print(c)


Writer Option
---------------------
writer()
DictWriter()
 
 

writer()-
--------------
import csv

with open(r'data1.csv','a') as csvfile:
    content=csv.writer(csvfile)

    content.writerow(['Shrey','22'])
    content.writerow(['Shreya','222'])


DictWriter-
--------------
import csv

with open(r'data1.csv','w') as csvfile:
    fields=['name','age','city']

    content=csv.DictWriter(csvfile,fields)
    content.writeheader()

    content.writerow({'name':'Shrey','age':'22','city':'Prayag'})
    content.writerow({'name':'Shreya','age':'22','city':'LKO'})
---------------------------------------------------------------------
self is a object prefence call
Encapsulation means storing or placing data in a single place to make it easily readable and compact in one place
@kovidhKumar Encapsulation means storing or placing data in a single place to make it easily readable and compact in one place.
__double underscore is private key of python access inside class only if access when getter and setter method to access outside class only
@staticmethod only bound class not object so self is not required





























































