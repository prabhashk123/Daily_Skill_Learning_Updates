(1)Installed venv-python -m venv <name>
(2)Activate venv-.\<venname\Scripts\activate or ./<env_name>/Scripts/activate
(3)Change directory-cd ven
(4)Install Django- pip install Django or error then python -m pip install django
(5)Check Django version- django-admin --version
(6)Create Django project - django-admin startproject project_name
(7)Change diectory set project_name-cd iTravel
(8)Running the Django development server-python manage.py runserver
(9)Creating a Web App in the iTravel project-python manage.py startapp app_name
(10)app_name=travello
(11)create your views.py then set urls.py-views import from django app
(12)url mapping this will be create common(profile)path in urls.py in project 
folder they need to create urls.py file in app folder for specific path like(view/edit/delete(from . import views))
(13)rendering web page-Create(templates)folder in project folder outer then inside templates creates Html files
(14)Templates inheritence-Create like style.html common used in other Html file like uses of like in home.html as
    The DTL tag {% block block_name %}  <content> {% endblock %}.
(15)extends/Inherit the style.html template into home.html and define the content for the block "block1".{% extends 'style.html' %}
(16)Handling data-From Get And Post Method.
(17)Note: In Django, when the POST method is used to submit a request, a CSRF (Cross Site Resource Forgery) token needs to be inserted. 
    The CSRF token is a unique value provided implicitly by Django for every client session.{% csrf_token %}
(18)Then create static folder in outer of project folder and inside all the images,style sheets,font,Java Script..etc
(19)after static django ask locaton so put end of settting.py file write this
    STATICFILES_DIRS=[os.path.join(BASE_DIR,'static')]
(20)Since static files can exist in multiple locations, we need to collect them all into a static root folder,
    for example 'assets', same put setting.py files put STATIC_ROOT=os.path.join(BASE_DIR,'assets')
    cmnd creates assets in outer of django project like-python manage.py collectstatic
(21)create Django model(ORM with MySQL DB)-----
    (a)change content of web page using DTL(Django template lang.)pass content in web page dynamically display it using DTL.then modify views.py file ,return render(request,'index.html',{'price':700})
    (b)creat web page application based on MVT(model view templates)it is technique for software design pattern 
    (b)firstly create/see models.py file in apps
(22)configure with database--
    (a)To use MySQL database in Django, we must have “mysqlclient” driver installed.pip install mysqlclient in project folder
    (b)Configure database in setting.py file---
                DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.mysql',
                'NAME': 'database_name',
                'USER': 'username',
                'PASSWORD': 'password',
                'HOST': 'hostname',
                'PORT': 'portnumber',
            }
    (c)creat models.py file insert data using model field
            class Destination(models.Model):
                name = models.CharField(max_length=200)
                image = models.ImageField(upload_to='pics')
                desc = models.TextField()
                price = models.IntegerField()
                offer = models.BooleanField(default=False)
    (d)installed app variable in setting.py file
        Whenever an app is created, a configuration class with the name 
        <appname>Config is automatically created in apps.py module of the app package. 
        For instance, a class named TravelloConfig(creat class automatic in apps.py file) is created in the apps.py module of the travello app.
    (e)example-installed apps=['travello.apps.TravelloConfig',]
    (f)then run cmd in project folder like  To migrate the models, we need to create the migration 
        file using the makemigrations command as follows.(python manage.py makemigrations) 
        The migration file with a specific migration number is created in the "migrations" 
        directory of the travello app as shown like 0001_initial.py inside migrations folder wher 0001 is migration number
        also inside 0001_initial folder craete automatce (id) property which is generated by Django itself.
    (g)Generating table creation query.like--[python manage.py sqlmigrate appname migration_number] in run project folder
    (h) Migrating the model to the database.like cmd--python manage.py migrate (update the database schema)
        Once this command is executed, the travello_destination table is created using the 
        CREATE TABLE query.Along with the destination table, some support tables and authentication tables are also 
        generated by Django.
(23)In our apps created then Django create by default admin user like localhost:8000/admin. in admin pannel
    (a)Let’s create superuser credentials for the admin panel using the command like python manage.py createsuperuser-after run this cmd
        then type type some information in terminal like first username-prabhash
        email-prabhash@gmail.com then password prabhash@123 then finally created Superuser then fill this user and password then open admin pannel
    (b)create object in like modify module admin.py as we are configuring admin panel to create registration 
        page for Destination model.then crating object in destination by add destination
    (c)The files uploaded by users are called as Media. To store the files uploaded,
        we need to configure Media path using MEDIA_ROOT variable and need to specify 
        the path using MEDIA_URL as follows: in setting.py
        #MEDIA
        MEDIA_URL='/media/'
        MEDIA_ROOT=os.path.join(BASE_DIR,'media')
    (d)We should also configure the "urlpatterns" in project URLs. We need to specify 
        the media URL as follows:
        urlpatterns = urlpatterns + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT) then import
    (e)Then see destination object in destination app_destination means object crete in our database.
(24)Conditional strcture in Django---
    Till now, we have passed a single object to the template using model. If we want to pass data for multiple destinations,
    it can be done using collection of objects.The function, Destination.objects.all() is used to retrieve all the Destination objects stored in the database.
    (a)To access the collection of objects passed to the template, we use the for loop of Django Template Language.
        For Loop in DTL:Syntax: {% for var in list %}---for accessing destination object used placed this syntax.
        if codition....
(25)User Registration and login--------------
    (a)create new apps inside this project folder like app name is user
    (b)Let us define user_register function in views.py of user app that returns "
        then attach register.html file in previous projects
    (c)creat urls.py files in user apps and register path of user_register then 
    (d)Configure urls of user with urls of itravel project
    (e)Then set link in index.html /user/register
    (f)Then create validation on user views.py and Use from django.contrib.auth.models import User post method
    (g)The function messages.info() is used to pass error messages to the template. 
        To display error messages, append the following DTL tags to the register.html page
            ​{% for message in messages %}
                <strong><h3>{{message}}</h3></strong>
            {% endfor %}
    (h)create user_login then create user_logout(views.py,urls.py,html file).
(26)Advance django concepts----------------
    (a)Capturing data from url---by anchor tag link using id 
    (b)relative url data access by name link {% url 'app_name:path_name' [args] %}
(27)Django Forms--The form fields can be auto generated using builtin Django classes. One such class is ModelForm in the django.forms module that can be used to 
    create user-defined form classes.
    (a)create forms.py file in django project apps
    (b)app views.py add form function using request.FILES for media files
(28)Sessions and Cookies in django---
    (a)Sessions are used to store data specific to a client that are accessible anywhere in the application 
        as long as the client is connected. Session data can be accessed and modified using the session dictionary 
        available in the request object.
        create session variable syntax=request.session['var_name']=value
    (b)The session variable in Django template can be accessed as follows.
        syntax={{ request.session.var_name }} both views.py and index.html
    (c)Cookies are information stored at the client side in the form of a dictionary. 
        In Django views, cookies can be accessed using COOKIES dictionary of request object.
(29)Backend of django REST API using DjangoFramework__------------------
    (a)Representational State Transfer (REST) is a web service which is used to retrieve 
       resources from the server. Using RESTful APIs, we can create, retrieve, update and delete
       the resources on server.
       Note: REST API returns data to the client in JSON format (JavaScript Object Notation 
       similar to Dictionary in Python with strings as keys).
    (b)Step-(1)pip install djangorestframework(2)then add setting.py file inside installed apps-'rest_framework'
    (c)Create Api step start now--------
        Step 1: We need to create a model serializer in order to convert the Model object into 
                JSON. A serializer is a class inherited from rest framework’s ModelSerializer class.
                Create serializers.py inside project apps like travello
        Step 2: Create an API view using the decorator @api_view[‘Method’]. Modify views.py to 
                add get_all_destinations function.
        Step 3: Update the travello urls.py to invoke the view created in the above step as follows.
(30)Deploying a Django Application---
    Deploying an application into a server is essential to make it live in production. 
    The Django development server is used only for development and debugging purposes, 
    not in the production environment. Hence, we will see how to deploy a Django application on 
    the Apache Server. Here, we are going to use Xampp for Apache server.
    (a)Step 1: Install Xampp from Software center.
    (b)Step 3: Install mod_wsgi module using the following command.(pip install mod_wsgi)
    (c)Run the following command in the command prompt to retrieve the mod_wsgi module details.
        mod_wsgi-express module-config
(31)Appendix-Some DTL tage uses syntax below--
    (a)The syntax for using a Django filter is as follows:-{{ variable|filter[:arg] }}
    (b)add--This filter is used to perform addition of numeric values and concatenation for lists and strings.
    Syntax:--{{ value1|add:value2 }},example-{{ var1|add:"2" }}
    (c)capfirst---capfirst is similar to capitalize method of Python string. It is used to capitalize the string.
         {{ var1|capfirst }}
    (d)cut--Removes the provided character from the string.syntax=>{{ var1|cut:"," }} If the value of var1 is 10,20,30 , cut returns 102030.
    (e)default--This filter returns the default value specified if the value of the variable evaluates to False, else returns the actual value.
       Syntax=>{{ var1|default:"Not Available" }}--If the value of var1 is "" (empty string), Not Available is returned, else the original value is returned.
    (f)divisibleby--Used to check the divisibility of a number with another number.{{ var1|divisibleby:"10" }}-The above statement returns True if the value of var1 is divisible by 10, else it returns False.
    (g)first--Used to retrieve the first item in a list.syntax=>{{ var1|first }}
       example=If the value of var1 is [10, 20, 30], the above statement returns 10.
    (h)join--It is similar to join method of Python string that is used to join a collection of strings with the delimiter provided.syntax=>{{ var1|join:" " }}
       example=If the value of var1 is ["Hello", "World"], the above statement returns "Hello World".
    (i)length--Used to find the length of a given string or a list.Syntax=>
       If the value of var1 is "Infosys", the above statement returns 7.{{ var1|length }}
    (j)lower and Upper--Used to convert a string into lower case.{{ var1|lower }}and {{ var1|upper }}
    (k)random--Used to generate a random item from the given list.syntax=>{{ var1|random }}
       example-If the value of var1 is [10, 20, 30], the above statement may return 10 for example.
    (l)title---Used to convert a given string into title case.example={{ var1|title }}
    (m)wordcount--Use to count the number of words in a given string.
(32)For upload pic in django
    step1> Folder create name media outer in project ImageField with upload_to='nameofpic',step2-in setting below:-
    MEDIA_URL='/media'
    MEDIA_ROOT=os.path.join(BASE_DIR,'media ')



























